package view;

import javax.swing.*;

import java.util.ArrayList;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

import common.*;
import controller.*;


import java.awt.*;
import java.util.*;
/*
 * this class is for the main interface after user login Dussenger
 */
public class MainInterface extends JFrame implements ActionListener{
	private JTextField tf_search;
	private HashMap friend;
	public HashMap getFriend() {
		return friend;
	}
	public void setFriend(HashMap friend) {
		this.friend = friend;
	}

	public JScrollPane getFriendlist() {
		return friendlist;
	}
	public void setFriendlist(JScrollPane friendlist) {
		this.friendlist = friendlist;
	}
	public JPanel getFriendPanel() {
		return friendPanel;
	}
	public void setFriendPanel(JPanel friendPanel) {
		this.friendPanel = friendPanel;
	}
	private JScrollPane friendlist;
	private JPanel friendPanel;
	
	
	private JTextField tf_NoChat;
	private JPanel search;
	
	private JPanel chatBox;
	public JPanel getChatBox() {
		return chatBox;
	}
	public void setChatBox(JPanel chatBox) {
		this.chatBox = chatBox;
	}
	private boolean hasChat = false;
	private JTextField tf_friendinfo;
	private JTextArea oldTalk;
	private JTextArea currTalk;
	private JButton searchbtn;
	private JLabel tf_Name;
	private JLabel tf_ID;
	private JButton btnSend;
	
	
	private JButton friend_btn;
	private JButton group_btn;
	
	private ArrayList<String> relation;
	private ArrayList<String> OnlineFriend;
	/**
	 * Create the frame.
	 */
	private String usr;
	private String target = "%%";
	public String getTarget() {
		return target;
	}
	public void setTarget(String target) {
		this.target = target;
	}
//	public static void main(String[] args) {
//		MainInterface main = new MainInterface("c");
//
//	}
	public MainInterface(String usr) {
		this.usr = usr;
		setTitle("Dussenger");
		setResizable(false);
		getContentPane().setBackground(UIManager.getColor("CheckBoxMenuItem.selectionBackground"));
		getContentPane().setForeground(Color.WHITE);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 723, 539);
		getContentPane().setLayout(null);
		//arrange search panel
		search = new JPanel();
		search.setBounds(6, 6, 282, 155);
		getContentPane().add(search);
		search.setLayout(null);
		
		tf_search = new JTextField();
		tf_search.setBounds(6, 104, 166, 45);
		search.add(tf_search);
		tf_search.setColumns(5);
		
		searchbtn = new JButton("Search Friend");
		searchbtn.setFont(new Font("Lucida Grande", Font.PLAIN, 12));
		searchbtn.setBounds(184, 105, 92, 45);
		searchbtn.setHorizontalAlignment(SwingConstants.LEADING);
		search.add(searchbtn);
		
		tf_Name = new JLabel();
		tf_Name.setBounds(80, 6, 196, 38);
		search.add(tf_Name);
		tf_Name.setText(usr);
		
		friend_btn = new JButton("Friend List");
		friend_btn.setBounds(6, 54, 90, 38);
		search.add(friend_btn);
		friend_btn.addActionListener(this);
		
		group_btn = new JButton("Group List");
		group_btn.setBounds(100, 54, 100, 38);
		search.add(group_btn);
		
		
		/*
		tf_ID = new JLabel();
		tf_ID.setBounds(80, 54, 196, 38);
		search.add(tf_ID);
		tf_ID.setText("TBD");
		*/
		
		JLabel lbl_Name = new JLabel("Name:");
		lbl_Name.setHorizontalAlignment(SwingConstants.CENTER);
		lbl_Name.setBounds(7, 6, 61, 38);
		search.add(lbl_Name);
		
		btnSend = new JButton("send");
		btnSend.setForeground(UIManager.getColor("Button.light"));
		btnSend.setBounds(336, 358, 75, 29);
		btnSend.addActionListener(this);
		/*
		JLabel lbl_ID = new JLabel("ID:");
		lbl_ID.setHorizontalAlignment(SwingConstants.CENTER);
		lbl_ID.setBounds(6, 54, 61, 38);
		search.add(lbl_ID);
		*/
		searchbtn.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				String friendID =tf_search.getText();
				tf_search.setText("");
				if(!search(friendID)){
					System.out.println("not found");
					new friendNotFound();
				}
			}		
		});
		relation = RelationManage.getRelation();
		if(relation == null)
			relation = new ArrayList();
		int total_relation = relation.size();
		OnlineFriend = RelationManage.getOnlineFriend();
		int cnt_onlineFriend = OnlineFriend.size();
		friendPanel = new JPanel();		
		friendPanel.setLayout(new GridLayout(total_relation, 1, 4, 4));
		friendlist = new JScrollPane(friendPanel);
		
		friend = RelationManage.getFriendList();
		
		
		for(int i = 0; i < total_relation; i++){
			String friend_i = relation.get(i);

			friend.put(friend_i, new JLabel(friend_i));

			
			((Component) friend.get(friend_i)).addMouseListener(new MouseAdapter(){
				@Override
				public void mouseClicked(MouseEvent e) {
					if(e.getClickCount() == 2){
						String friendID = ((JLabel)e.getSource()).getText();
						System.out.println("wish to talk to friend " + friendID);
						newChatBox(friendID);
					}
				}

			});
			friendPanel.add((Component) friend.get(friend_i));
		}
		for(int i = 0; i < cnt_onlineFriend; i++) {
			((Component) friend.get(OnlineFriend.get(i))).setForeground(Color.GREEN);
		}
		
		
		friendlist.setBounds(6, 166, 282, 345);
		getContentPane().add(friendlist);
		
		chatBox = new JPanel();
		chatBox.setBounds(300, 6, 417, 505);
		getContentPane().add(chatBox);
		chatBox.setLayout(null);
		
		//before any talk, chat box is blank
		tf_NoChat = new JTextField();
		tf_NoChat.setEditable(false);
		tf_NoChat.setBackground(SystemColor.window);
		tf_NoChat.setHorizontalAlignment(SwingConstants.CENTER);
		tf_NoChat.setText("No Current Chat");
		tf_NoChat.setBounds(105, 214, 220, 65);
		chatBox.add(tf_NoChat);
		tf_NoChat.setColumns(10);
		//ManageChat.addView("1", this);
		//this.setDefaultCloseOperation(EXIT_ON_CLOSE); 
		
		this.addWindowListener(new java.awt.event.WindowAdapter() { 
				public void windowClosing(java.awt.event.WindowEvent e) { 
						System.out.println("window close");
						Socket s = ManageThread.getClientConServerThread(usr).getS();
						try {
							ObjectOutputStream oos=new ObjectOutputStream(s.getOutputStream());
							Message end = new Message();
							end.setMesType(MessageType.logout);
							end.setSender(usr);
							oos.writeObject(end);
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						
						System.exit(0); 
					} 
				}); 
		this.setVisible(true);
	}
	//when a friend is selected, chat box of that friend is opened
	public void newChatBox(String friendID){
		this.target = friendID;
		
		chatBox.removeAll();
		hasChat = true;
		tf_friendinfo = new JTextField("friend: " + friendID);
		tf_friendinfo.setHorizontalAlignment(SwingConstants.CENTER);
		tf_friendinfo.setBounds(6, -2, 411, 45);
		tf_friendinfo.setEditable(false);
		chatBox.add(tf_friendinfo);
		tf_friendinfo.setColumns(10);
		
		oldTalk = new JTextArea();
		oldTalk.setBounds(6, 51, 405, 307);
		oldTalk.setEditable(false);
		chatBox.add(oldTalk);
		
		currTalk = new JTextArea();
		currTalk.setBounds(6, 387, 405, 112);
		chatBox.add(currTalk);
		
		chatBox.add(btnSend);
		chatBox.revalidate();
		chatBox.repaint();
		if(ManageChat.getCon(friendID) != null){
			oldTalk.append(ManageChat.getCon(friendID));
			ManageChat.remove(friendID);
			
		}
		
	}
	public boolean search(String friendID){
		if(friend.containsKey(friendID))
		{
			newChatBox(friendID);
			return true;
		}
		return false;
	}
	public void showMessage(Message m)
	{
		String info=m.getSender()+" to "+m.getGetter()+" :"+m.getCon()+"\r\n";
		this.oldTalk.append(info);
	}
	
	
	public void updateFriendList(){
		
		Message m = new Message();
		m.setGetter(this.usr);
		m.setSender(this.usr);
		m.setMesType(MessageType.getRelation);
		ObjectOutputStream oos;
		try {
			oos = new ObjectOutputStream
			(ManageThread.getClientConServerThread(this.usr).getS().getOutputStream());
			oos.writeObject(m);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	public void updateOnlineFriendList(String newUser) {
		if (relation.contains(newUser)) {
			//System.out.println("new user is: " + newUser);
			Object m = RelationManage.getFriendList().get(newUser);
			((Component) m).setForeground(Color.GREEN);
			
		}
	}
	
	public void updateOfflineFriendList(String newUser) {
		if (relation.contains(newUser)) {
			System.out.println("logoff user is: " + newUser);
			Object m = friend.get(newUser);
			((Component) m).setForeground(Color.BLACK);
			
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == btnSend){
			try {
				
				Message m = new Message();
				m.setGetter(this.target);
				System.out.println("target is"+this.target);
				m.setSender(this.usr);
				System.out.println("usr is"+this.usr);
				m.setCon(currTalk.getText());
				ObjectOutputStream oos=new ObjectOutputStream
				(ManageThread.getClientConServerThread(this.usr).getS().getOutputStream());
				oos.writeObject(m);
				currTalk.setText("");
			} catch (Exception e1) {
				e1.printStackTrace();
				// TODO: handle exception
			}
		}
		if(e.getSource() == friend_btn)
		{

			updateFriendList();
		}
		
	}
	
	
	
	
	
}

